/*
 * -------------------------------------------------
 *  nf-core/mag Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  container = params.container

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'

  // Process-specific resource requirements
  withName: fastqc_raw {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  withName: fastqc_trimmed {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  withName: multiqc {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  withName: busco_download_db {
    time = 4.h
  }
  withName: porechop {
    cpus = { check_max (4 * task.attempt, 'cpus' ) }
    memory = { check_max (30.GB * task.attempt, 'memory' ) }
    time = { check_max (4.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  withName: nanolyse {
    cpus = { check_max (2 * task.attempt, 'cpus' ) }
    memory = { check_max (10.GB * task.attempt, 'memory' ) }
    time = { check_max (3.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  //filtlong: exponential increase of memory and time with attempts
  //64 GB starting memory might be sufficient
  withName: filtlong {
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (256.GB * (2**(task.attempt-1)), 'memory' ) }
    time = { check_max (48.h * (2**(task.attempt-1)), 'time' ) }
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  withName: remove_phix {
    cpus = { check_max (4 * task.attempt, 'cpus' ) }
    memory = { check_max (8.GB * task.attempt, 'memory' ) }
    time = { check_max (6.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  withName: megahit {
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (40.GB * task.attempt, 'memory' ) }
    time = { check_max (8.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  //SPAdes returns error(1) if it runs out of memory (and for other reasons as well...)!
  //exponential increase of memory with attempts
  //spades: 40 GB memory / 16 h is sufficient for low complexity Illumina-only metagenome
  //320 GB is not sufficient for complex dataset, also >50h!
  withName: spades {
    cpus = { check_max (20 * task.attempt, 'cpus' ) }
    memory = { check_max (512.GB * (2**(task.attempt-1)), 'memory' ) }
    time = { check_max (120.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137,1] ? 'retry' : 'ignore' }
  }
  //spadeshybrid: 64 GB / 16 h starting memory might be sufficient
  withName: spadeshybrid {
    cpus = { check_max (20 * task.attempt, 'cpus' ) }
    memory = { check_max (512.GB * (2**(task.attempt-1)), 'memory' ) }
    time = { check_max (120.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137,1] ? 'retry' : 'ignore' }
  }
  withName: quast {
    cpus = { check_max (2 * task.attempt, 'cpus' ) }
    memory = { check_max (10.GB * task.attempt, 'memory' ) }
    time = { check_max (2.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  withName: metabat {
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (20.GB * task.attempt, 'memory' ) }
    time = { check_max (8.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  withName: busco {
    cpus = { check_max (4 * task.attempt, 'cpus' ) }
    memory = { check_max (10.GB * task.attempt, 'memory' ) }
    time = { check_max (4.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  withName: busco_plot {
    cpus = { check_max (1 * task.attempt, 'cpus' ) }
    memory = { check_max (10.GB * task.attempt, 'memory' ) }
    time = { check_max (4.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
  igenomes_base = 's3://ngi-igenomes/igenomes/'
}
